@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util
@using Data

<div class="card" style="margin:1rem">
    <div class="card-header"> @header</div>
    <div class="card-body">
        <ChartJsPieChart @ref="partPropertyPieChart" Config="@_config" 
                         Width=@Width
                         Height=@Height />
    </div>
</div>


@code {
    private PieConfig _config;
    private ChartJsPieChart partPropertyPieChart;
    private BSCard ChartCard;

    [Parameter]
    public string header { get; set; }
    [Parameter]
    public int Width { get; set; }
    [Parameter]
    public int Height { get; set; }
    [Parameter]
    public Dictionary<string, int> sourceData { get; set; }

    public void refresh()
    {
        SetData();
        partPropertyPieChart.Update();
    }

    private void SetData()
    {
        List<string> TypeName = new List<string>();
        List<double> TypeCount = new List<double>();
        List<string> BackgroudColorList = new List<string>();
        foreach (KeyValuePair<string, int> typeData in sourceData)
        {
            TypeName.Add(typeData.Key);
            TypeCount.Add((double)typeData.Value);
            BackgroudColorList.Add(ColorUtil.RandomColorString());
        }
        _config.Data.Labels.Clear();
        _config.Data.Labels.AddRange(TypeName);

        var pieSet = new PieDataset
        {
            BackgroundColor = BackgroudColorList.ToArray(),
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };

        pieSet.Data.AddRange(TypeCount);
        _config.Data.Datasets.Clear();
        _config.Data.Datasets.Add(pieSet);
    }

    protected override void OnInitialized()
    {
        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                }
            }
        };

        List<string> TypeName = new List<string>();
        List<double> TypeCount = new List<double>();
        List<string> BackgroudColorList = new List<string>();
        foreach (KeyValuePair<string, int> typeData in sourceData)
        {
            TypeName.Add(typeData.Key);
            TypeCount.Add((double)typeData.Value);
            BackgroudColorList.Add(ColorUtil.RandomColorString());
        }
        _config.Data.Labels.AddRange(TypeName);

        var pieSet = new PieDataset
        {
            BackgroundColor = BackgroudColorList.ToArray(),
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };

        pieSet.Data.AddRange(TypeCount);
        _config.Data.Datasets.Add(pieSet);
    }
}
