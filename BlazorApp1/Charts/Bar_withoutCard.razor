@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.BarChart.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Wrappers
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util
@using Data

        <ChartJsBarChart @ref="partPropertyPieChart"
                         Config="@_config"
                         Width=@Width
                         Height=@Height />


@code {
    private BarConfig _config;
    private ChartJsBarChart partPropertyPieChart;
    private BSCard ChartCard;

    [Parameter]
    public string header { get; set; }
    [Parameter]
    public int Width { get; set; }
    [Parameter]
    public int Height { get; set; }
    [Parameter]
    public Dictionary<string, int> sourceData { get; set; }
    [Parameter]
    public int MaxCount { get; set; }
    [Parameter]
    public bool isSingleColor { get; set; }

    public void refresh()
    {
        _config.Data.Labels.Clear();
        _config.Data.Datasets.Clear();
        addData();
        partPropertyPieChart.Update();
    }

    void addData()
    {
        List<string> TypeName = new List<string>();
        List<Int32Wrapper> TypeCount = new List<Int32Wrapper>();
        List<string> BackgroudColorList = new List<string>();

        if (isSingleColor)
        {
            var color = ColorUtil.RandomColorString();
            foreach (KeyValuePair<string, int> typeData in sourceData)
            {
                TypeName.Add(typeData.Key);
                TypeCount.Add(typeData.Value);
                BackgroudColorList.Add(color);
            }
        }
        else
        {
            foreach (KeyValuePair<string, int> typeData in sourceData)
            {
                TypeName.Add(typeData.Key);
                TypeCount.Add(typeData.Value);
                BackgroudColorList.Add(ColorUtil.RandomColorString());
            }
        }
        if (MaxCount != 0 && sourceData.Count > MaxCount)
        {
            TypeName = TypeName.Take(MaxCount).ToList();
            TypeCount = TypeCount.Take(MaxCount).ToList();
            BackgroudColorList = BackgroudColorList.Take(MaxCount).ToList();
            header = header + " 前" + MaxCount + "项";
        }
        _config.Data.Labels.AddRange(TypeName);

        var _barDataSet = new BarDataset<Int32Wrapper>
        {
            Label = header,
            BackgroundColor = BackgroudColorList.ToArray(),
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };

        _barDataSet.AddRange(TypeCount);
        _config.Data.Datasets.Add(_barDataSet);
    }

    protected override void OnInitialized()
    {
        _config = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
            {
                        new BarCategoryAxis
                        {
                            BarPercentage = 0.5,
                            BarThickness = BarThickness.Flex
                        }
                    },
                    YAxes = new List<CartesianAxis>
            {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true
                            }
                        }
                    }
                }
            }
        };

        addData();
    }
}

